package beans;

import org.springframework.beans.factory.BeanNameAware;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationContext;

import java.util.Arrays;

/**
 * Demonstrates various aware interfaces in spring-bean-lifecycle
 */
public class Book implements ApplicationContextAware, BeanNameAware, BeanFactoryAware {
	
	private String name;
    
	public Book(){
		System.out.println("----- Contructor of Book bean invoked -----");
	}
	
	@Override 
	public void setApplicationContext(ApplicationContext context) {
		System.out.println("------- setApplicationContext method in Book ------");
		System.out.println("Beans in ApplicationContext " + Arrays.toString(context.getBeanDefinitionNames()));
	}
	
	@Override
	public void setBeanName(String beanName) {
		System.out.println("------- setBeanName called on Book instance ------ ");
		System.out.println("bean-name provided:" + beanName);
	}
	
	@Override
	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
		System.out.println("------ setBeanFactory called on Book instance ------");
		System.out.println("1. is Book-bean present in BeanFactory:" + beanFactory.containsBean("bookBean"));
		System.out.println("2. is Book-bean singleton in BeanFactory:" + beanFactory.isSingleton("bookBean"));
		System.out.println("3. does name bookBean match Book type:" + beanFactory.isTypeMatch("bookBean", this.getClass()));
	}
	
	public void setName(String name) {
		System.out.println("------ Setter of name in Book invoked --------");
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
}